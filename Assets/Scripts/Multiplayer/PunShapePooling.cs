using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using ExitGames.Client.Photon;
using Photon.Realtime;
using Photon.Pun;
using DG.Tweening;

public class PunShapePooling : MonoBehaviour, IOnEventCallback
{
    public List<GameObject> shapePrefabs;
    int _currentShapeId = 0;
    PhotonView _view;
    Canvas _canvas;
    void Awake()
    {
        _view = GetComponent<PhotonView>();
    }
    // Start is called before the first frame update
    void Start(){
        _canvas = FindObjectOfType<Canvas>();
        transform.SetParent(_canvas.transform);
        SetPosition();
    }
    public void SetPosition()
    {
        if(_view.IsMine){
            GetComponent<RectTransform>().localPosition = new Vector2(0, -576);
        } else {
            GetComponent<RectTransform>().localPosition = new Vector2(0, 576);
        }
        GetComponent<RectTransform>().localScale = Vector3.one;
        GenerateRandomShape();
    }

    // Update is called once per frame
    private void OnEnable()
    {
        PhotonNetwork.AddCallbackTarget(this);
    }

    private void OnDisable()
    {
        PhotonNetwork.RemoveCallbackTarget(this);
    }

    public void OnEvent(EventData photonEvent)
    {
        byte eventCode = photonEvent.Code;
        if (eventCode == PunEvents.FinishDroppingShapeEventCode)
        {
            object[] data = (object[])photonEvent.CustomData;
            if(_view.Owner.ActorNumber == (int) data[0]){
                MyDebug.Log("receive FinishDroppingShapeEvent from player {0}, is a {1} shape", 
                    data[0], (bool) data[1] ? "valid" : "invalid");

                if(!_view.IsMine && (bool) data[1]){
                    Vector2 target;
                    RectTransformUtility.ScreenPointToLocalPointInRectangle(transform as RectTransform,
                    new Vector2((float) data[2], (float) data[3]), Camera.main, out target);

                    shapePrefabs[_currentShapeId].GetComponent<RectTransform>().
                        DOLocalMove(target, .4f, false).SetUpdate(true).OnComplete(() => 
                    {
                        // soul.gameObject.SetActive(false);
                        // GetComponent<RectTransform>().localPosition = startPosition;
                        GameEvents.OnShapeDropped(shapePrefabs[_currentShapeId]
                            .GetComponent<PunShape>()._shapeSquares.Length);
                    });
                }

                //FinishDroppingAboveShape((bool) data[1]);
                //we should wait for 0.4 second
                StartCoroutine(FinishDroppingAboveShapeCO((bool) data[1]));
            }
            // if(!_view.IsMine && _view.Owner.ActorNumber == (int) data[0]){
            //     MyDebug.Log("with target positon {0} {1}", data[2], data[3]);
            //     Vector2 pos;
            //     MyDebug.Log("trasform: {0} {1}", transform.position.x, transform.position.y);
            //     MyDebug.Log("camera: {0} {1}", Camera.main.transform.position.x, Camera.main.transform.position.y);
            //     RectTransformUtility.ScreenPointToLocalPointInRectangle(transform as RectTransform,
            //         new Vector2((float) data[2], (float) data[3]), Camera.main, out pos);
            //     MyDebug.Log("{0}: after convert {1} {2}", _view.Owner.ActorNumber, pos.x, pos.y);

            //     // shapePrefabs[_currentShapeId].GetComponent<RectTransform>().localPosition = pos;
            // }
        }
        if(eventCode == PunEvents.GenerateRandomShapeEventCode){
            object[] data = (object[])photonEvent.CustomData;
            if(_view.Owner.ActorNumber == (int) data[0])
                GenerateRandomShape();
        }
    }

    IEnumerator FinishDroppingAboveShapeCO(bool b){
        yield return new WaitForSeconds(10f);
        FinishDroppingAboveShape(b);
    }

    public void GenerateRandomShape(){
        if(_view.IsMine)
            _view.RPC("SetShape", RpcTarget.All, 
                Random.Range(0, shapePrefabs.Count));
    }

    [PunRPC] public void SetShape(int i){
        shapePrefabs[_currentShapeId].SetActive(false);
        _currentShapeId = i;
        shapePrefabs[_currentShapeId].SetActive(true);
    }

    public void FinishDroppingAboveShape(bool isValidDrop){
        //above shape, which is randomly generated by GenerateRandomShape()
        shapePrefabs[_currentShapeId].GetComponent<PunShape>().ResetPosition();
        shapePrefabs[_currentShapeId].SetActive(!isValidDrop);
    }
}
