using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using ExitGames.Client.Photon;
using Photon.Realtime;
using Photon.Pun;

public class PunShapePoolingV2 : MonoBehaviour, IOnEventCallback
{
    public List<GameObject> shapePrefabs;
    int _currentShapeId = 0;
    PhotonView _view;

    void Awake(){
        _view = GetComponent<PhotonView>();
    }
    // Start is called before the first frame update
    void Start()
    {
        if(_view.Owner.IsMasterClient){
            transform.position = new Vector2(0, -3f);
        } else {
            transform.position = new Vector2(0, 3f);
        }
        GenerateRandomShape();
    }

    private void OnEnable()
    {
        PhotonNetwork.AddCallbackTarget(this);
    }

    private void OnDisable()
    {
        PhotonNetwork.RemoveCallbackTarget(this);
    }

    public void OnEvent(EventData photonEvent)
    {
        byte eventCode = photonEvent.Code;
        if (eventCode == PunEvents.FinishDroppingShapeEventCode)
        {
            object[] data = (object[])photonEvent.CustomData;
            // MyDebug.Log("i am shape of player {0}, received FinishDroppingShapeEvent from player {1}, is a {2} shape", 
            //         _view.Owner.ActorNumber, data[0], (bool) data[1] ? "valid" : "invalid");
            // Debug.Log("receive PunEvents.FinishDroppingShapeEventCode");
            // if(_view.Owner.ActorNumber == (int) data[0]){
            //     MyDebug.Log("receive FinishDroppingShapeEvent from player {0}, is a {1} shape", 
            //         data[0], (bool) data[1] ? "valid" : "invalid");
            // }
            if(_view.Owner.ActorNumber == (int) data[0])
                FinishDroppingAboveShape((bool) data[1]);
        }
        if(eventCode == PunEvents.GenerateRandomShapeEventCode){
            object[] data = (object[])photonEvent.CustomData;
            if(_view.Owner.ActorNumber == (int) data[0])
                GenerateRandomShape();
        }
    }

    public void GenerateRandomShape(){
        if(_view.IsMine){
            Debug.Log("GenerateRandomShape");
            _view.RPC("SetShape", RpcTarget.All, 
                Random.Range(0, shapePrefabs.Count));
        }
    }

    [PunRPC] public void SetShape(int i){
        shapePrefabs[_currentShapeId].SetActive(false);
        _currentShapeId = i;
        shapePrefabs[_currentShapeId].SetActive(true);
    }

    public void FinishDroppingAboveShape(bool isValidDrop){
        Debug.Log("FinishDroppingAboveShape");
        //above shape, which is randomly generated by GenerateRandomShape()
        shapePrefabs[_currentShapeId].GetComponent<PunShapeV2>().ResetPosition();
        shapePrefabs[_currentShapeId].SetActive(!isValidDrop);
    }
}
